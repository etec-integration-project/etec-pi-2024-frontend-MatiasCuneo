// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole        @default(USER)
  accounts      Account[]
  isTFAEnabled  Boolean         @default(false)
  TFConfirm     TFConfirm?
  invitation    UserInv[]
  planId        Int?

  plan          Plans?          @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model Account {
  id                String      @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id                String      @id @default(cuid())
  email             String
  token             String      @unique
  expires_at        DateTime

  @@unique([email, token])
}

model PassResetToken {
  id                String      @id @default(cuid())
  email             String
  token             String      @unique
  expires_at        DateTime

  @@unique([email, token])
}

model TFToken {
  id                String      @id @default(cuid())
  email             String
  token             String      @unique
  expires_at        DateTime

  @@unique([email, token])
}

model TFConfirm {
  id                String      @id @default(cuid())
  userId            String
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Functions {
  id                Int         @id @default(autoincrement())
  name              String
  description       String
  price             Float
}

model Plans {
  id                Int         @id @default(autoincrement())
  functions         String
  price             Float

  users             User[]
}

model DesignTemplate{
  id                Int         @id @default(autoincrement())
  name              String
  fields            String
  design            Designs?

  userInv           UserInv[]
}

model Designs {
  id                Int         @id @default(autoincrement())
  templateId        Int @unique
  design            Bytes

  template          DesignTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, design])
}

model UserInv {
  id                String      @id @default(cuid())
  userId            String
  templateId        Int
  content           String

  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  template          DesignTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}